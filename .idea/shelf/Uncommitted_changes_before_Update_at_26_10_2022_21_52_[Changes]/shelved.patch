Index: src/store/slices/postsReducer.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { PostApi } from \"../../api/postsApi\";\r\nimport { getAllCommentsTC } from \"./commentsReducer\";\r\n\r\nconst initialState = {\r\n  posts: {\r\n    items: [],\r\n    status: \"loading\",\r\n    isUpdated: false\r\n  },\r\n  tags: {\r\n    items: [],\r\n    status: \"loading\"\r\n  },\r\n  comments: {\r\n    items: [],\r\n    status: \"loading\"\r\n  }\r\n};\r\nexport const getPostsTC = createAsyncThunk(\"/posts/getPostsTC\", async () => {\r\n  const { data } = await PostApi.getPosts();\r\n  return data;\r\n});\r\nexport const deletePostTC = createAsyncThunk(\"/posts/deletePostTC\", async (postId) => {\r\n  const { data } = await PostApi.deletePost(postId);\r\n  return data;\r\n});\r\nexport const updatePostTC = createAsyncThunk(\"/posts/updatePostTC\", async ({ postId, payload }) => {\r\n  const { data } = await PostApi.updatePost(postId, payload);\r\nreturn data\r\n});\r\n\r\nexport const getTagsTC = createAsyncThunk(\"/posts/getTagsTC\", async () => {\r\n  const { data } = await PostApi.getTags();\r\n  return data;\r\n});\r\nconst postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState: initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [updatePostTC.pending]: (state) => {\r\n      state.posts.isUpdated = false;\r\n    },\r\n    [updatePostTC.fulfilled]: (state) => {\r\n      state.posts.isUpdated = true;\r\n    },\r\n    [updatePostTC.rejected]: (state) => {\r\n      state.posts.isUpdated = false;\r\n      state.posts.status = \"error\";\r\n    },\r\n    [getAllCommentsTC.pending]: (state) => {\r\n      state.comments.items = [];\r\n      state.comments.status = \"loading\";\r\n    },\r\n    [getAllCommentsTC.fulfilled]: (state, action) => {\r\n      state.comments.items = action.payload;\r\n      state.comments.status = \"loaded\";\r\n    },\r\n    [getAllCommentsTC.rejected]: (state) => {\r\n      state.comments.items = [];\r\n      state.comments.status = \"error\";\r\n    },\r\n    [getPostsTC.pending]: (state) => {\r\n      state.posts.items = [];\r\n      state.posts.status = \"loading\";\r\n    },\r\n    [getPostsTC.fulfilled]: (state, action) => {\r\n      state.posts.items = action.payload;\r\n      state.posts.status = \"loaded\";\r\n    },\r\n    [getPostsTC.rejected]: (state) => {\r\n      state.posts.items = [];\r\n      state.posts.status = \"error\";\r\n    },\r\n    [getTagsTC.pending]: (state) => {\r\n      state.tags.items = [];\r\n      state.tags.status = \"loading\";\r\n    },\r\n    [getTagsTC.fulfilled]: (state, action) => {\r\n      state.tags.items = action.payload;\r\n      state.tags.status = \"loaded\";\r\n    },\r\n    [getTagsTC.rejected]: (state) => {\r\n      state.tags.items = [];\r\n      state.tags.status = \"error\";\r\n    },\r\n    [deletePostTC.pending]: (state, action) => {\r\n      //console.log(action.meta.arg);\r\n      state.posts.items = state.posts.items.filter(obj => obj._id !== action.meta.arg);\r\n    },\r\n    [deletePostTC.fulfilled]: (state, action) => {\r\n      state.posts.status = action.payload.message;\r\n    },\r\n    [deletePostTC.rejected]: (state) => {\r\n      state.posts.status = \"error\";\r\n    }\r\n  }\r\n});\r\n\r\nexport const postsReducer = postsSlice.reducer;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/store/slices/postsReducer.js b/src/store/slices/postsReducer.js
--- a/src/store/slices/postsReducer.js	(revision 03b711eaa0925eca66e0f13b41c4e6a0d2c95d92)
+++ b/src/store/slices/postsReducer.js	(date 1666540511991)
@@ -6,7 +6,8 @@
   posts: {
     items: [],
     status: "loading",
-    isUpdated: false
+    isUpdated: false,
+    createdId:""
   },
   tags: {
     items: [],
@@ -29,6 +30,19 @@
   const { data } = await PostApi.updatePost(postId, payload);
 return data
 });
+export const updateOrCreatePostTC = createAsyncThunk("/posts/updateOrCreatePostTC", async ({ id, fields }) => {
+  console.log(id);
+  try {
+    const { data } = id ?
+      await PostApi.updatePost(id, fields)
+      : await PostApi.createPost(fields);
+    return data
+  } catch (e) {
+    console.warn(e);
+    alert("Ошибка при создании статьи");
+  }
+
+});
 
 export const getTagsTC = createAsyncThunk("/posts/getTagsTC", async () => {
   const { data } = await PostApi.getTags();
@@ -40,12 +54,22 @@
   reducers: {},
   extraReducers: {
     [updatePostTC.pending]: (state) => {
+      state.posts.createdId = '';
+    },
+    [updatePostTC.fulfilled]: (state,action) => {
+      state.posts.createdId = action.payload.id;
+    },
+    [updatePostTC.rejected]: (state) => {
+      state.posts.createdId = '';
+      state.posts.status = "error";
+    },
+    [updateOrCreatePostTC.pending]: (state) => {
       state.posts.isUpdated = false;
     },
-    [updatePostTC.fulfilled]: (state) => {
+    [updateOrCreatePostTC.fulfilled]: (state) => {
       state.posts.isUpdated = true;
     },
-    [updatePostTC.rejected]: (state) => {
+    [updateOrCreatePostTC.rejected]: (state) => {
       state.posts.isUpdated = false;
       state.posts.status = "error";
     },
Index: src/pages/AddPost/AddPost.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Button from \"@mui/material/Button\";\r\nimport SimpleMDE from \"react-simplemde-editor\";\r\nimport \"easymde/dist/easymde.min.css\";\r\nimport styles from \"./AddPost.module.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { NavLink, useNavigate, useParams } from \"react-router-dom\";\r\nimport { UserApi } from \"../../api/userApi\";\r\nimport { PostApi } from \"../../api/postsApi\";\r\nimport { PORT } from \"../../api/instance\";\r\n\r\nexport const AddPost = () => {\r\n  const dispatch = useDispatch();\r\n  const { isAuth } = useSelector((state) => state.user.authMe);\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n  const postIdEdit = id;\r\n  const isEditing = Boolean(id);\r\n  useEffect(() => {\r\n    if (id) {\r\n      PostApi.getOnePost(id).then(\r\n        res => {\r\n          //console.log(res.data);\r\n          setTitle(res.data.title);\r\n          setText(res.data.text);\r\n          setTags(res.data.tags.join(\",\"));\r\n          setImageUrl(res.data.imageUrl);\r\n        }\r\n      ).catch((err) => {\r\n        console.warn(err);\r\n        alert(\"Ошибка при получении статьи\");\r\n      });\r\n    }\r\n  }, []);\r\n  const inputFileRef = useRef(null);\r\n\r\n  const [text, setText] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [tags, setTags] = useState(\"\");\r\n  const [imageUrl, setImageUrl] = useState(\"\");\r\n\r\n  const handleChangeFile = async (event) => {\r\n    try {\r\n      const formData = new FormData();\r\n      const file = event.target.files[0];\r\n      formData.append(\"image\", file);\r\n      const { data } = await UserApi.uploadFile(formData);\r\n      setImageUrl(data.url);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      alert(\"Ошибка при загрузке файла\");\r\n    }\r\n  };\r\n  const onSubmit = async () => {\r\n    try {\r\n      const fields = {\r\n        title,\r\n        imageUrl,\r\n        tags: tags.split(\",\"),\r\n        text\r\n      };\r\n      const { data } = isEditing ?\r\n        await PostApi.updatePost(postIdEdit, fields)\r\n        // dispatch(updatePostTC({ postId: postIdEdit, payload: fields }))\r\n        : await PostApi.createPost(fields);\r\n      const id = isEditing ? postIdEdit : data._id;\r\n      navigate(`/posts/${id}`);\r\n    } catch (e) {\r\n      console.warn(e);\r\n      alert(\"Ошибка при создании статьи\");\r\n    }\r\n  };\r\n  const onClickRemoveImage = () => {\r\n    setImageUrl(\"\");\r\n  };\r\n\r\n  const onChange = useCallback((value) => {\r\n    setText(value);\r\n  }, []);\r\n\r\n  const options = React.useMemo(\r\n    () => ({\r\n      spellChecker: false,\r\n      maxHeight: \"400px\",\r\n      autofocus: true,\r\n      placeholder: \"Введите текст...\",\r\n      status: false,\r\n      autosave: {\r\n        enabled: true,\r\n        delay: 1000\r\n      }\r\n    }),\r\n    []\r\n  );\r\n  if (!isAuth) {\r\n    navigate(\"/\");\r\n  }\r\n  return (\r\n    <Paper style={{ padding: 30 }}>\r\n      <Button onClick={() => inputFileRef.current.click()} variant=\"outlined\" size=\"large\">\r\n        Загрузить превью\r\n      </Button>\r\n      <input ref={inputFileRef} type=\"file\" onChange={handleChangeFile} hidden />\r\n      {imageUrl && (\r\n        <><Button variant=\"contained\" color=\"error\" onClick={onClickRemoveImage}>\r\n          Удалить\r\n        </Button>\r\n          <img\r\n            className={styles.image}\r\n            src={`${PORT}${imageUrl}`}\r\n            alt=\"Uploaded\"\r\n          /></>\r\n      )}\r\n      <br />\r\n      <br />\r\n      <TextField\r\n        classes={{ root: styles.title }}\r\n        variant=\"standard\"\r\n        placeholder=\"Заголовок статьи...\"\r\n        fullWidth\r\n        value={title}\r\n        onChange={(e) => setTitle(e.currentTarget.value)}\r\n      />\r\n      <TextField\r\n        onChange={(e) => setTags(e.currentTarget.value)}\r\n        value={tags}\r\n        classes={{ root: styles.tags }}\r\n        variant=\"standard\"\r\n        placeholder=\"Тэги\"\r\n        fullWidth\r\n      />\r\n      <SimpleMDE\r\n        className={styles.editor}\r\n        value={text}\r\n        onChange={onChange}\r\n        options={options}\r\n      />\r\n      <div className={styles.buttons}>\r\n        <Button onClick={onSubmit} size=\"large\" variant=\"contained\">\r\n          {isEditing ? \"Опубликовать\" : \"Сохранить\"}\r\n        </Button>\r\n        <NavLink to=\"/\">\r\n          <Button size=\"large\">Отмена</Button>\r\n        </NavLink>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pages/AddPost/AddPost.jsx b/src/pages/AddPost/AddPost.jsx
--- a/src/pages/AddPost/AddPost.jsx	(revision 03b711eaa0925eca66e0f13b41c4e6a0d2c95d92)
+++ b/src/pages/AddPost/AddPost.jsx	(date 1666540722712)
@@ -10,19 +10,21 @@
 import { UserApi } from "../../api/userApi";
 import { PostApi } from "../../api/postsApi";
 import { PORT } from "../../api/instance";
+import { updateOrCreatePostTC } from "../../store/slices/postsReducer";
 
 export const AddPost = () => {
   const dispatch = useDispatch();
   const { isAuth } = useSelector((state) => state.user.authMe);
+  const {createdId} = useSelector(state => state.posts.createdId)
+  console.log(createdId);
   const navigate = useNavigate();
   const { id } = useParams();
-  const postIdEdit = id;
-  const isEditing = Boolean(id);
+  // const postIdEdit = id;
+  // const isEditing = Boolean(id);
   useEffect(() => {
     if (id) {
       PostApi.getOnePost(id).then(
         res => {
-          //console.log(res.data);
           setTitle(res.data.title);
           setText(res.data.text);
           setTags(res.data.tags.join(","));
@@ -53,25 +55,33 @@
       alert("Ошибка при загрузке файла");
     }
   };
-  const onSubmit = async () => {
-    try {
-      const fields = {
-        title,
-        imageUrl,
-        tags: tags.split(","),
-        text
-      };
-      const { data } = isEditing ?
-        await PostApi.updatePost(postIdEdit, fields)
-        // dispatch(updatePostTC({ postId: postIdEdit, payload: fields }))
-        : await PostApi.createPost(fields);
-      const id = isEditing ? postIdEdit : data._id;
-      navigate(`/posts/${id}`);
-    } catch (e) {
-      console.warn(e);
-      alert("Ошибка при создании статьи");
-    }
+  const onSubmit = () => {
+    const fields = {
+      title,
+      imageUrl,
+      tags: tags.split(","),
+      text
+    };
+    dispatch(updateOrCreatePostTC({ id, fields }));
+
+    // try {
+    //   const fields = {
+    //     title,
+    //     imageUrl,
+    //     tags: tags.split(","),
+    //     text
+    //   };
+    //   const { data } = id ?
+    //     await PostApi.updatePost(id, fields)
+    //     : await PostApi.createPost(fields);
+    //   const resultId = id ? id : data._id;
+    //   navigate(`/posts/${resultId}`);
+    // } catch (e) {
+    //   console.warn(e);
+    //   alert("Ошибка при создании статьи");
+    // }
   };
+
   const onClickRemoveImage = () => {
     setImageUrl("");
   };
@@ -139,7 +149,7 @@
       />
       <div className={styles.buttons}>
         <Button onClick={onSubmit} size="large" variant="contained">
-          {isEditing ? "Опубликовать" : "Сохранить"}
+          {id ? "Опубликовать" : "Сохранить"}
         </Button>
         <NavLink to="/">
           <Button size="large">Отмена</Button>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"f6cc8278-b7bc-4f65-a1b6-305fbc7ecca4\" name=\"Changes\" comment=\"new\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/api/commentsApi.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/api/commentsApi.js\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/components/AddComment/AddComment.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/components/AddComment/AddComment.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/components/CommentsBlock.jsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/components/CommentsBlock.jsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/store/slices/commentsReducer.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/store/slices/commentsReducer.js\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"JavaScript File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"104ea3da-6b67-4b3e-9eea-f1698959e0ed\" />\r\n        <option name=\"url\" value=\"git@github.com:Archakov06/mern-blog-frontend.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Fe5MFUERckSTx57RIFiLfxvOKO\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/ESD-USB/server-mongodb&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.standard&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.standard&quot;: &quot;&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;prettierjs.PrettierConfiguration.Package&quot;: &quot;D:\\\\mern-blog-frontend\\\\node_modules\\\\prettier&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;terminal&quot;,\r\n    &quot;ts.external.directory.path&quot;: &quot;C:\\\\Program Files\\\\JetBrains\\\\WebStorm 2022.2\\\\plugins\\\\JavaScriptLanguage\\\\jsLanguageServicesImpl\\\\external&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\mern-blog-frontend\\src\\store\\slices\" />\r\n      <recent name=\"D:\\mern-blog-frontend\\src\\api\" />\r\n      <recent name=\"D:\\mern-blog-frontend\\src\\store\" />\r\n      <recent name=\"D:\\mern-blog-frontend\\src\\hooks\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"start\" type=\"js.build_tools.npm\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <package-json value=\"$PROJECT_DIR$/package.json\" />\r\n      <command value=\"run\" />\r\n      <scripts>\r\n        <script value=\"start\" />\r\n      </scripts>\r\n      <node-interpreter value=\"project\" />\r\n      <envs />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"npm.start\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"f6cc8278-b7bc-4f65-a1b6-305fbc7ecca4\" name=\"Changes\" comment=\"\" />\r\n      <created>1664839659166</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1664839659166</updated>\r\n      <workItem from=\"1664839662635\" duration=\"2529000\" />\r\n      <workItem from=\"1664853737246\" duration=\"1085000\" />\r\n      <workItem from=\"1664896962340\" duration=\"13808000\" />\r\n      <workItem from=\"1664956426896\" duration=\"12142000\" />\r\n      <workItem from=\"1664969346650\" duration=\"68564000\" />\r\n      <workItem from=\"1665478796918\" duration=\"912000\" />\r\n      <workItem from=\"1665480827865\" duration=\"16829000\" />\r\n      <workItem from=\"1665573838242\" duration=\"26009000\" />\r\n      <workItem from=\"1665738144002\" duration=\"593000\" />\r\n      <workItem from=\"1665777553718\" duration=\"1004000\" />\r\n      <workItem from=\"1665993400683\" duration=\"3667000\" />\r\n      <workItem from=\"1666005001988\" duration=\"1507000\" />\r\n      <workItem from=\"1666118858318\" duration=\"1204000\" />\r\n      <workItem from=\"1666162006880\" duration=\"870000\" />\r\n      <workItem from=\"1666162923184\" duration=\"7598000\" />\r\n      <workItem from=\"1666175936718\" duration=\"365000\" />\r\n      <workItem from=\"1666176962681\" duration=\"3645000\" />\r\n      <workItem from=\"1666182795049\" duration=\"386000\" />\r\n      <workItem from=\"1666203691487\" duration=\"60000\" />\r\n      <workItem from=\"1666203979425\" duration=\"3703000\" />\r\n      <workItem from=\"1666332946874\" duration=\"365000\" />\r\n      <workItem from=\"1666333336281\" duration=\"39000\" />\r\n      <workItem from=\"1666333399043\" duration=\"4932000\" />\r\n      <workItem from=\"1666354945690\" duration=\"2961000\" />\r\n      <workItem from=\"1666362672471\" duration=\"9629000\" />\r\n      <workItem from=\"1666508489491\" duration=\"2416000\" />\r\n      <workItem from=\"1666511533705\" duration=\"14828000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"new\">\r\n      <created>1664913030348</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1664913030348</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"new\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"new\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 03b711eaa0925eca66e0f13b41c4e6a0d2c95d92)
+++ b/.idea/workspace.xml	(date 1666540582685)
@@ -6,10 +6,8 @@
   <component name="ChangeListManager">
     <list default="true" id="f6cc8278-b7bc-4f65-a1b6-305fbc7ecca4" name="Changes" comment="new">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/api/commentsApi.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/api/commentsApi.js" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/components/AddComment/AddComment.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/AddComment/AddComment.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/components/CommentsBlock.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/components/CommentsBlock.jsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/store/slices/commentsReducer.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/store/slices/commentsReducer.js" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/pages/AddPost/AddPost.jsx" beforeDir="false" afterPath="$PROJECT_DIR$/src/pages/AddPost/AddPost.jsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/store/slices/postsReducer.js" beforeDir="false" afterPath="$PROJECT_DIR$/src/store/slices/postsReducer.js" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -125,7 +123,7 @@
       <workItem from="1666354945690" duration="2961000" />
       <workItem from="1666362672471" duration="9629000" />
       <workItem from="1666508489491" duration="2416000" />
-      <workItem from="1666511533705" duration="14828000" />
+      <workItem from="1666511533705" duration="19830000" />
     </task>
     <task id="LOCAL-00001" summary="new">
       <created>1664913030348</created>
